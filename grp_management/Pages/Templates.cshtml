@page
@model grp_management.Pages.TemplatesModel
@{
    ViewData["Title"] = "Message Templates";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>Message Templates</h2>
            </div>
            
            <!-- Template Type Tabs -->
            <ul class="nav nav-tabs mb-4" id="templateTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="general-tab" data-bs-toggle="tab" data-bs-target="#general" type="button" role="tab">General Templates</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="frequent-tab" data-bs-toggle="tab" data-bs-target="#frequent" type="button" role="tab">Frequent Templates</button>
                </li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-content" id="templateTabsContent">
                <!-- General Templates -->
                <div class="tab-pane fade show active" id="general" role="tabpanel">
                    <div class="card glass-card mb-4">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="card-title">General Templates</h5>
                            </div>
                            
                            @if (Model.GeneralTemplates != null && Model.GeneralTemplates.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Message Preview</th>
                                                <th style="width: 25%;">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var template in Model.GeneralTemplates)
                                            {
                                                <tr>
                                                    <td>@template.TemplateName</td>
                                                    <td>@(template.TemplateMsg.Length > 100 ? template.TemplateMsg.Substring(0, 97) + "..." : template.TemplateMsg)</td>
                                                    <td class="d-flex" style="gap: 6px;">
                                                        <button class="btn btn-sm send-template-btn" 
                                                                data-template-id="@template.TemplateID"
                                                                data-template-msg="@template.TemplateMsg"
                                                                data-placeholders='@Html.Raw(template.Placeholders ?? "{}")'>
                                                            <i class="fas fa-paper-plane"></i> Send
                                                        </button>
                                                        @if (User.IsInRole("Admin"))
                                                        {
                                                            <button class="btn btn-sm edit-template-btn"
                                                                    data-template-id="@template.TemplateID"
                                                                    data-template-name="@template.TemplateName"
                                                                    data-template-msg="@template.TemplateMsg"
                                                                    data-template-type="@template.TemplateType"
                                                                    data-placeholders='@Html.Raw(template.Placeholders ?? "{}")'>
                                                                <i class="fas fa-edit"></i> Edit
                                                            </button>
                                                            <button class="btn btn-sm delete-template-btn"
                                                                    data-template-id="@template.TemplateID">
                                                                <i class="fas fa-trash"></i> Delete
                                                            </button>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info" role="alert">
                                    No general templates found. Please add some templates.
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Frequent Templates -->
                <div class="tab-pane fade" id="frequent" role="tabpanel">
                     <div class="card glass-card mb-4">
                        <div class="card-body">
                             <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="card-title">Frequent Templates</h5>
                            </div>

                            @if (Model.FrequentTemplates != null && Model.FrequentTemplates.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                         <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Message Preview</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var template in Model.FrequentTemplates)
                                            {
                                                <tr>
                                                    <td>@template.TemplateName</td>
                                                    <td>@(template.TemplateMsg.Length > 100 ? template.TemplateMsg.Substring(0, 97) + "..." : template.TemplateMsg)</td>
                                                    <td class="d-flex" style="gap: 6px;">
                                                         <button class="btn btn-sm send-template-btn" 
                                                                 data-template-id="@template.TemplateID"
                                                                 data-template-msg="@template.TemplateMsg"
                                                                data-placeholders='@Html.Raw(template.Placeholders ?? "{}")'>
                                                            <i class="fas fa-paper-plane"></i> Send
                                                        </button>
                                                        @if (User.IsInRole("Admin"))
                                                        {
                                                            <button class="btn btn-sm edit-template-btn"
                                                                    data-template-id="@template.TemplateID"
                                                                    data-template-name="@template.TemplateName"
                                                                    data-template-msg="@template.TemplateMsg"
                                                                    data-template-type="@template.TemplateType"
                                                                    data-placeholders='@Html.Raw(template.Placeholders ?? "{}")'>
                                                                <i class="fas fa-edit"></i> Edit
                                                            </button>
                                                            <button class="btn btn-sm delete-template-btn"
                                                                    data-template-id="@template.TemplateID">
                                                                <i class="fas fa-trash"></i> Delete
                                                            </button>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-info" role="alert">
                                    No frequent templates found. Please add some templates.
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Send Message Modal -->
<div class="modal fade" id="sendTemplateModal" tabindex="-1" aria-labelledby="sendTemplateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Modal content will be dynamically inserted here -->
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <i class="fas fa-info-circle me-2"></i>
            <strong class="me-auto" id="toastTitle">Notification</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage">
        </div>
    </div>
</div>

<style>
    /* Style for the success alert */
    #successAlert {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050; /* Ensure it's above modals */
        width: 300px;
        animation: slideIn 0.5s ease-out;
    }

    /* Keyframes for sliding in */
    @@keyframes slideIn {
        from { transform: translateX(100%); }
        to { transform: translateX(0); }
    }

    /* Keyframes for sliding out */
    @@keyframes slideOut {
        from { transform: translateX(0); }
        to { transform: translateX(100%); }
    }

    /* Custom styles for glass-card */
    .glass-card {
        background-color: var(--card-bg);
        backdrop-filter: blur(10px);
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.125);
    }

    /* Ensure text in card body is readable */
    .glass-card .card-body {
        color: var(--text-color);
    }

     /* Style for active nav tab link */
    .nav-tabs .nav-link.active {
        color: var(--bs-nav-tabs-link-active-color, #495057); /* Use a dark color */
        background-color: var(--bs-nav-tabs-link-active-bg, #fff); /* Keep background white or change as needed */
        border-color: var(--bs-nav-tabs-link-active-border-color, #dee2e6 #dee2e6 #fff); /* Adjust border */
    }

    /* Toast styles */
    .toast {
        background-color: var(--card-bg);
        border: 1px solid rgba(255, 255, 255, 0.125);
    }

    .toast-header {
        background-color: var(--card-bg);
        border-bottom: 1px solid rgba(255, 255, 255, 0.125);
    }

    .toast-body {
        color: var(--text-color);
    }

    .toast.success .toast-header {
        color: #198754;
    }

    .toast.error .toast-header {
        color: #dc3545;
    }

    .toast.warning .toast-header {
        color: #ffc107;
    }

    /* Custom styles for modal dropdown in dark theme */
    #sendTemplateModal .form-select {
        background-color: #2c3034;
        color: #fff;
        border: 1px solid #495057;
    }

    #sendTemplateModal .form-select option {
        background: #2c3034;
        color: #fff;
    }

    #sendTemplateModal textarea[readonly] {
        background-color: #212529;
        color: #ccc;
    }
</style>

@section Scripts {
    <script>
$(document).ready(function() {
    // Safely get the list of groups, forcing lowercase properties to avoid ambiguity
    const availableGroups = @Html.Raw(Json.Serialize(Model.AvailableGroups.Select(g => new { id = g.Id, name = g.Name })));
    
        function getAntiForgeryToken() {
        return $('input[name="__RequestVerificationToken"]').val();
    }
    
    function showToast(title, message, isSuccess = true) {
        const toastEl = $('#toast');
        const toastTitleEl = $('#toastTitle');
        const toastBodyEl = $('#toastMessage');

        toastTitleEl.text(title);
        toastBodyEl.text(message);

        toastEl.removeClass('bg-success bg-danger text-white');
        toastEl.addClass(isSuccess ? 'bg-success text-white' : 'bg-danger text-white');
        
        const toast = new bootstrap.Toast(toastEl);
        toast.show();
    }

    // Event handler for clicking 'Send' on a template row
    $(document).on('click', '.send-template-btn', function() {
        const button = $(this);
        const templateId = button.data('template-id');
        const templateMsg = button.data('template-msg');
        const placeholders = button.data('placeholders');

        const modal = $('#sendTemplateModal');
        const modalContent = modal.find('.modal-content');
        modalContent.empty();

        const modalHeader = $('<div>').addClass('modal-header').append(
            $('<h5>').addClass('modal-title').text('Send Message'),
            $('<button>').addClass('btn-close').attr({ 'data-bs-dismiss': 'modal' })
        );

        const modalBody = $('<div>').addClass('modal-body');
        const form = $('<form>').attr('id', 'sendMessageForm');

        // Create and populate the 'Select Group' dropdown
        const groupSelect = $('<select>').addClass('form-select mb-3').attr('name', 'GroupId');
        groupSelect.append($('<option>').text('Select Group').val(''));
        availableGroups.forEach(function(group) {
            // Use lowercase 'name' and 'id' which now matches our explicit serialization
            groupSelect.append($('<option>').text(group.name).val(group.id));
        });
        form.append($('<div>').addClass('mb-3').append($('<label>').text('Select Group'), groupSelect));
        
        form.append($('<div>').addClass('mb-3').append(
            $('<label>').text('Message Preview'),
            $('<textarea>').addClass('form-control').attr({ rows: 4, readonly: true }).val(templateMsg)
        ));

        if (placeholders && Object.keys(placeholders).length > 0) {
            const placeholdersContainer = $('<div>').addClass('placeholders-container');
            $.each(placeholders, function(key, desc) {
                placeholdersContainer.append(
                    $('<div>').addClass('mb-3').append(
                        $('<label>').addClass('form-label').text(desc),
                        $('<input>').addClass('form-control').attr({ type: 'text', 'data-placeholder-key': key, required: true })
                    )
                );
            });
            form.append(placeholdersContainer);
        }

        modalBody.append(form);

        const modalFooter = $('<div>').addClass('modal-footer').append(
            $('<button>').addClass('btn btn-secondary').attr({ 'data-bs-dismiss': 'modal' }).text('Cancel'),
            $('<button>').addClass('btn btn-primary').attr('id', 'send-final-btn').data('template-id', templateId).text('Send Message')
        );

        modalContent.append(modalHeader, modalBody, modalFooter);
        modal.modal('show');

        // --- Live Preview Logic ---
        const previewTextarea = modal.find('textarea[readonly]');
        const placeholderInputs = modal.find('.placeholders-container input');

        function updatePreview() {
            let currentMessage = templateMsg;
            // Iterate over each placeholder input and update the preview text
            placeholderInputs.each(function() {
                const input = $(this);
                const key = input.data('placeholder-key');
                const value = input.val();
                // Use a regular expression for global replacement of the placeholder
                const regex = new RegExp('{{' + key + '}}', 'g');
                currentMessage = currentMessage.replace(regex, value || '{{' + key + '}}');
            });
            previewTextarea.val(currentMessage);
        }

        // Attach an 'input' event listener to all placeholder fields
        placeholderInputs.on('input', updatePreview);
    });

    // Event handler for the final 'Send Message' button inside the modal
    $(document).on('click', '#send-final-btn', function(e) {
        e.preventDefault();

        const sendButton = $(this);
        const modal = $('#sendTemplateModal');
        const form = modal.find('#sendMessageForm');
        const selectedGroupId = form.find('select[name="GroupId"]').val();
        const templateId = sendButton.data('template-id');

        if (!selectedGroupId) {
            showToast('Warning', 'Please select a group.', false);
            return;
        }

        const placeholderValues = {};
        let allPlaceholdersFilled = true;
        form.find('.placeholders-container input').each(function() {
            const input = $(this);
            const key = input.data('placeholder-key');
            const value = input.val();
            if (!value) {
                allPlaceholdersFilled = false;
            }
            placeholderValues[key] = value;
        });

        if (!allPlaceholdersFilled) {
            showToast('Warning', 'Please fill in all placeholder fields.', false);
            return;
        }

        const payload = {
            TemplateID: templateId,
            GroupId: parseInt(selectedGroupId, 10),
            Placeholders: placeholderValues,
            SentVia: "WebApp"
        };

        $.ajax({
            url: '/Templates?handler=SendMessage',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(payload),
            headers: { 'RequestVerificationToken': getAntiForgeryToken() },
            beforeSend: function() {
                sendButton.prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span> Sending...');
            }
        })
        .done(function(response) {
            if (response.success) {
                showToast('Success', 'Message sent successfully!');
                if (response.redirectUrl) {
                    setTimeout(() => { window.location.href = response.redirectUrl; }, 1000);
                }
            } else {
                showToast('Error', response.message || 'An unknown error occurred.', false);
            }
        })
        .fail(function(jqXHR) {
            let errorMessage = 'A server error occurred.';
            if (jqXHR.responseJSON && jqXHR.responseJSON.message) {
                errorMessage = jqXHR.responseJSON.message;
            }
            showToast('Error', errorMessage, false);
        })
        .always(function() {
            sendButton.prop('disabled', false).text('Send Message');
            modal.modal('hide');
        });
    });

    // Handle Add/Edit Template Modal
    $('#addTemplateModal').on('show.bs.modal', function(event) {
        const button = $(event.relatedTarget);
        const isEdit = button.hasClass('edit-template-btn');
        const modal = $(this);

        if (isEdit) {
            modal.find('.modal-title').text('Edit Template');
            modal.find('#templateId').val(button.data('template-id'));
            modal.find('#templateName').val(button.data('template-name'));
            modal.find('#templateType').val(button.data('template-type'));
            modal.find('#templateMsg').val(button.data('template-msg'));
            
            const placeholders = button.data('placeholders');
            modal.find('#placeholders').val(JSON.stringify(placeholders, null, 2));
        } else {
            modal.find('.modal-title').text('Add New Template');
            modal.find('#templateForm')[0].reset();
            modal.find('#templateId').val('0');
        }
    });

    // Handle Save Template button click
    $('#saveTemplate').on('click', async function() {
        const form = $('#templateForm');
        const data = {
            TemplateID: parseInt(form.find('#templateId').val(), 10),
            TemplateName: form.find('#templateName').val(),
            TemplateType: form.find('#templateType').val(),
            TemplateMsg: form.find('#templateMsg').val(),
            Placeholders: form.find('#placeholders').val()
        };

        const url = data.TemplateID === 0 ? '/api/templates/create' : `/api/templates/edit/${data.TemplateID}`;
        const method = data.TemplateID === 0 ? 'POST' : 'PUT';
        
        try {
            const response = await fetch(url, {
                method: method,
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify(data)
                    });
                    
                    if (response.ok) {
                showToast('Success', `Template ${data.TemplateID === 0 ? 'added' : 'updated'} successfully!`);
                $('#addTemplateModal').modal('hide');
                setTimeout(() => location.reload(), 1000);
                    } else {
                        const error = await response.json();
                        showToast('Error', error.message || 'Failed to save template', false);
                    }
                } catch (error) {
            console.error('Error saving template:', error);
            showToast('Error', 'An unexpected error occurred.', false);
        }
    });
    
    // Handle Delete Template button click
    $(document).on('click', '.delete-template-btn', async function() {
                    if (!confirm('Are you sure you want to delete this template?')) return;
                    
        const templateId = $(this).data('template-id');
        const url = `/api/templates/delete/${templateId}`;

                    try {
            const response = await fetch(url, {
                            method: 'DELETE',
                            headers: {
                                'RequestVerificationToken': getAntiForgeryToken()
                            }
                        });
                        
                        if (response.ok) {
                showToast('Success', 'Template deleted successfully!');
                setTimeout(() => location.reload(), 1000);
                         } else {
                            const error = await response.json();
                            showToast('Error', error.message || 'Failed to delete template', false);
                        }
                    } catch (error) {
            console.error('Error deleting template:', error);
            showToast('Error', 'An unexpected error occurred.', false);
        }
            });
        });
    </script>
}